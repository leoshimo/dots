#+TITLE: Emacs Configuration
#+AUTHOR: leoshimo
#+PROPERTY: header-args :tangle init.el :comments header

* Prelude

#+begin_src emacs-lisp
;; Emacs Config
#+end_src

* Theme

#+begin_src emacs-lisp
;; Line numbers
(global-display-line-numbers-mode t)
(column-number-mode t)
(global-hl-line-mode t)
(setq global-hl-line-sticky-flag t)

;; modus-themes - https://protesilaos.com/emacs/modus-themes
(use-package modus-themes
  :config
  (setq modus-themes-to-toggle '(modus-vivendi-tritanopia modus-operandi-tinted)))

;; smart-mode-line

(use-package smart-mode-line
  :config
  (setq sml/no-confirm-load-theme t
        sml/theme 'respectful)
  (sml/setup))

;; (use-package acme-theme
;;   :config
;;   (load-theme 'acme t))
#+end_src

* Unorganized

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/ls/")
(load-library "straight")

(load-library "base")
(load-library "company")
(load-library "evil")
(load-library "dumb-jump")
(load-library "keybindings")
(load-library "lisp")
(load-library "ls-elixir")
(load-library "ls-flyspell")
(load-library "lsp")
(load-library "magit")
(load-library "org")
(load-library "terminal")
(load-library "vertico")
(load-library "web")
(load-library "which-key")
(load-library "project")
(load-library "restclient")
(load-library "window")
;; (load-library "window-split")

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(magit-todos-insert-after '(bottom) nil nil "Changed by setter of obsolete option `magit-todos-insert-at'")
 '(safe-local-variable-values '((magit-todos-depth . 0))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

(use-package lox-mode)
(use-package rec-mode)

(use-package lua-mode)
(recentf-mode)

;; rg (ripgrep) - https://github.com/dajva/rg.el
(use-package rg
  :config
  (rg-enable-default-bindings))

(setq undo-outer-limit 72000000)

(straight-use-package '(janet
   :type git
   :host github
   :repo "serialdev/ijanet-mode")
)
(use-package janet-mode)


(define-key c-mode-map (kbd "C-c C-c C-r")
            (lambda ()
              (interactive)
              (compile "make run")))
(define-key c-mode-map (kbd "C-c C-c C-b")
            (lambda ()
              (interactive)
              (compile "make build")))
(define-key c-mode-map (kbd "C-c C-c C-f")
            (lambda ()
              (interactive)
              (compile "make format")))
(define-key c-mode-map (kbd "C-c C-c C-c")
            (lambda ()
              (interactive)
              (compile "make clean")))

#+end_src

* YAML
[[https://github.com/yoshiki/yaml-mode][yaml-mode]]

#+begin_src emacs-lisp
(use-package yaml-mode)
#+end_src

* Rust

#+begin_src emacs-lisp
;; rustic - https://github.com/brotzeit/rustic
(use-package rustic
  :config
  (setq rustic-compile-backtrace 1)
  (setq rustic-compile-directory-method 'rustic-buffer-workspace)
  ;; sensible colors in term
  (setq rustic-ansi-faces ["black" "red2" "green3" "yellow3" "cyan2" "magenta3" "cyan3" "white"]))
#+end_src

* wgrep
[[https://github.com/mhayashi1120/Emacs-wgrep/tree/master][Github - wgrep]]

#+begin_src emacs-lisp
(use-package wgrep
  :config
  (require 'wgrep))
#+end_src

* Elfeed

[[https://github.com/skeeto/elfeed][Github - Elfeed]]

#+begin_src emacs-lisp :results none
;; -*- lexical-binding: t -*-

(use-package elfeed
  :bind (("C-x w" . elfeed))
  :config
  (setq elfeed-curl-program-name "curl")
  (setq elfeed-feeds
        '("https://lobste.rs"
          ("https://lobste.rs/t/rust.rss" rust)
          ("https://lobste.rs/t/elixir.rss" elixir)
          ("https://karthinks.com/index.xml" emacs)
          ("https://planet.emacslife.com/atom.xml" emacs))))

;; (setq elfeed-show-entry-switch #'elfeed-display-buffer)
;; (defun elfeed-display-buffer (buf &optional act)
;;   (pop-to-buffer buf)
;;   (set-window-text-height (get-buffer-window) (round (* 0.7 (frame-height)))))
#+end_src

** Bindings
=RET= - view selected entry
=b= - open in browser
=r= - mark as read
=u= - mark as unread
=+= - tag
=-= - untag
** Search Queries Reference

=@6-months-ago +unread= - only unread in past 6mo

=linu[xs] @1-year-old= - entries about linux from last year

=-unread +youtube #10= - last 10 read entries w/ youtube

=+unread !x?emacs= - only unread w/o =emacs= or =xemacs= in title

=+emacs =http://example.org/feed/= - entries tagged =emacs= from specific feed

* htmlize

[[https://github.com/hniksic/emacs-htmlize][GitHub - hniksic/emacs-htmlize: Convert buffer text and decorations to HTML.]]

#+begin_src emacs-lisp
(use-package htmlize)
#+end_src

* Dired

#+begin_src emacs-lisp
(setq dired-auto-revert-buffer t)
#+end_src

* Magit

#+begin_src emacs-lisp
(setq magit-save-repository-buffers 'dontask)
#+end_src

* HTML Utils

#+begin_src emacs-lisp
;; Decode HTML entities
(defun leoshimo/html-decode-entities (html)
  "Decode given HTML entities into strings into entities"
  (with-temp-buffer
    (save-excursion (insert html))
    (decode-coding-string (xml-parse-string) 'utf-8)))
#+end_src

* org

#+begin_src emacs-lisp
;; Auto Link Title
;; Adapted from https://gist.github.com/jmn/34cd4205fa30ccf83f94cb1bc0198f3f
(defun leoshimo/url-get-title (url &optional descr)
  "Takes a URL and returns the value of the <title> HTML tag,
   Thanks to https://frozenlock.org/tag/url-retrieve/ for documenting url-retrieve"
  (let ((buffer (url-retrieve-synchronously url))
        (title nil))
    (save-excursion
      (set-buffer buffer)
      (goto-char (point-min))
      (search-forward-regexp "<title>\\([^<]+?\\)</title>")	
      (setq title (leoshimo/html-decode-entities (match-string 1)))
      (kill-buffer (current-buffer)))
    title))

(setq org-make-link-description-function 'leoshimo/url-get-title)

;; Org CSS
(defun eos/org-inline-css-hook (exporter)
  "Insert custom inline css to automatically set the
 background of code to whatever theme I'm using's background"
  (when (eq exporter 'html)
    (let* ((my-pre-bg (face-background 'default))
           (my-pre-fg (face-foreground 'default)))
      (setq
       org-html-head-extra
       (concat
        org-html-head-extra
        (format
         "<style type=\"text/css\">\n pre.src {background-color: %s; color: %s;}</style>\n"
         my-pre-bg my-pre-fg))))))

(add-hook 'org-export-before-processing-hook #'eos/org-inline-css-hook)

(add-hook 'org-mode-hook (lambda () (local-set-key (kbd "C-c RET") 'gptel-send)))
#+end_src

* smartparens

[[https://github.com/Fuco1/smartparens][GitHub - Fuco1/smartparens: Minor mode for Emacs that deals with parens pairs and tries to be smart about it.]]

#+begin_src emacs-lisp
;; (use-package smartparens
;;   :hook (prog-mode text-mode markdown-mode)
;;   :config (require 'smartparens-config))
#+end_src

* cogni

Emacs bindings for [[https://github.com/leoshimo/cogni][cogni]]

#+begin_src emacs-lisp
(defun leoshimo/cogni-on-region (start end prompt replace)
  "Run cogni on region. Prefix arg means replace region, instead of separate output buffer"
  (interactive "r\nsPrompt: \nP")
  (shell-command-on-region start end
                           (format "cogni -s \"%s\"" prompt)
                           nil replace))
(global-set-key (kbd "M-c") #'leoshimo/cogni-on-region)
#+end_src

* whisper.el
[[https://github.com/natrys/whisper.el][GitHub - natrys/whisper.el]]

#+begin_src emacs-lisp
(straight-use-package '(whisper
                        :type git
                        :host github
                        :repo "natrys/whisper.el"))

(use-package whisper
  :config
  (setq whisper-install-directory "/tmp/"
        whisper-model "base"
        whisper-language "en"
        whisper-translate nil))
#+end_src

** Utility - Setting Input Device (macOS)

[[https://github.com/natrys/whisper.el/wiki/MacOS-Configuration#what-should-be-the-value-of-whisper--ffmpeg-input-device][MacOS Configuration · natrys/whisper.el Wiki · GitHub]]

=M-x rk/select-default-audio-device= to set input device for whisper.el

#+begin_src emacs-lisp
(defun rk/get-ffmpeg-device ()
  "Gets the list of devices available to ffmpeg.
The output of the ffmpeg command is pretty messy, e.g.
  [AVFoundation indev @ 0x7f867f004580] AVFoundation video devices:
  [AVFoundation indev @ 0x7f867f004580] [0] FaceTime HD Camera (Built-in)
  [AVFoundation indev @ 0x7f867f004580] AVFoundation audio devices:
  [AVFoundation indev @ 0x7f867f004580] [0] Cam Link 4K
  [AVFoundation indev @ 0x7f867f004580] [1] MacBook Pro Microphone
so we need to parse it to get the list of devices.
The return value contains two lists, one for video devices and one for audio devices.
Each list contains a list of cons cells, where the car is the device number and the cdr is the device name."
  (unless (string-equal system-type "darwin")
    (error "This function is currently only supported on macOS"))

  (let ((lines (string-split (shell-command-to-string "ffmpeg -list_devices true -f avfoundation -i dummy || true") "\n")))
    (cl-loop with at-video-devices = nil
             with at-audio-devices = nil
             with video-devices = nil
             with audio-devices = nil
             for line in lines
             when (string-match "AVFoundation video devices:" line)
             do (setq at-video-devices t
                      at-audio-devices nil)
             when (string-match "AVFoundation audio devices:" line)
             do (setq at-audio-devices t
                      at-video-devices nil)
             when (and at-video-devices
                       (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
             do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) video-devices)
             when (and at-audio-devices
                       (string-match "\\[\\([0-9]+\\)\\] \\(.+\\)" line))
             do (push (cons (string-to-number (match-string 1 line)) (match-string 2 line)) audio-devices)
             finally return (list (nreverse video-devices) (nreverse audio-devices)))))

(defun rk/find-device-matching (string type)
  "Get the devices from `rk/get-ffmpeg-device' and look for a device
matching `STRING'. `TYPE' can be :video or :audio."
  (let* ((devices (rk/get-ffmpeg-device))
         (device-list (if (eq type :video)
                          (car devices)
                        (cadr devices))))
    (cl-loop for device in device-list
             when (string-match-p string (cdr device))
             return (car device))))

(defcustom rk/default-audio-device nil
  "The default audio device to use for whisper.el and outher audio processes."
  :type 'string)

(defun rk/select-default-audio-device (&optional device-name)
  "Interactively select an audio device to use for whisper.el and other audio processes.
If `DEVICE-NAME' is provided, it will be used instead of prompting the user."
  (interactive)
  (let* ((audio-devices (cadr (rk/get-ffmpeg-device)))
         (indexes (mapcar #'car audio-devices))
         (names (mapcar #'cdr audio-devices))
         (name (or device-name (completing-read "Select audio device: " names nil t))))
    (setq rk/default-audio-device (rk/find-device-matching name :audio))
    (when (boundp 'whisper--ffmpeg-input-device)
      (setq whisper--ffmpeg-input-device (format ":%s" rk/default-audio-device)))))
#+end_src

* evil
** evil-smartparens

[[https://github.com/expez/evil-smartparens][GitHub - expez/evil-smartparens: Evil integration for Smartparens]]

#+begin_src emacs-lisp
;; (use-package evil-smartparens
;;   :config
;;   (add-hook 'smartparens-enabled-hook #'evil-smartparens-mode))
#+end_src

* Apple

#+begin_src emacs-lisp
(use-package swift-mode
    :bind (:map swift-mode-map
                ("C-c C-f" . compile-swiftlint-lint)))

(defun compile-swiftlint-lint (&optional autofix)
  "Runs swiftlint lint --quiet. AUTOFIX prefix argument will try to autofix."
  (interactive "P")
  (let* ((dir (vc-root-dir))
         (default-directory (if dir dir default-directory))
         (cmd (if autofix
                  "swiftlint lint --quiet --fix"
                  "swiftlint lint --quiet")))
    (compile cmd)))
#+end_src

* lyric / vrs

Configuration for [[https://github.com/leoshimo/vrs][vrs runtime and lyric lang]]

#+begin_src emacs-lisp
(defvar vrsctl_base_command
     "vrsctl --name editor --bind rlist --bind nl_shell --bind interfacegen --bind os_notify --bind todos --bind os_cal --bind os_browser --bind os_window --bind cmd_macro")

(defun lyric-eval-buffer (editor_format)
  "Evaluates contents of current buffer"
  (interactive "P")
  (if editor_format
      (shell-command-on-region (point-min) (point-max) (concat vrsctl_base_command " --format editor"))
    (shell-command-on-region (point-min) (point-max) vrsctl_base_command)))

(defun lyric-eval-last-sexp (replace)
  "Evaluates last sexp. Prefix arg replaces output into current buffer."
  (interactive "P")
  (let* ((arg (shell-quote-argument (prin1-to-string (pp-last-sexp))))
         (cmd (concat vrsctl_base_command (format " --command %s" arg))))
    (if replace
        (progn (save-excursion
                 (forward-char)
                 (backward-kill-sexp)
                 (insert (string-trim (shell-command-to-string cmd)))))
      (shell-command cmd))))

(defun lyric-eval-region (start end replace)
  "Evaluates contents of region"
  (interactive "r\nP")
  (shell-command-on-region start end
                           vrsctl_base_command
                           nil replace))

(defvar-keymap lyric-mode-map
  "C-c C-c" #'lyric-eval-buffer
  "C-c C-e" #'lyric-eval-last-sexp
  "C-c C-r" #'lyric-eval-region)

(define-derived-mode lyric-mode janet-mode "lyric"
  "Major mode for Lyric lang")

(add-to-list 'auto-mode-alist '("\\.ll\\'" . lyric-mode))
#+end_src

* AppleScript

#+begin_src emacs-lisp
(use-package apples-mode)
#+end_src

* github

#+begin_src emacs-lisp
(define-key magit-status-mode-map (kbd "C-c C-p")
            (lambda ()
              (interactive)
              (start-process "*gh pr create*" nil "gh" "pr" "create" "--web")))
#+end_src

* hideshow

#+begin_src emacs-lisp
(use-package hideshow
  :hook (rustic-mode . hs-minor-mode)
  :config
  (setq hs-isearch-open t))

(add-hook 'prog-mode-hook #'hs-minor-mode)

(defun hs-cycle (&optional level)
  (interactive "p")
  (let (message-log-max
        (inhibit-message t))
    (if (= level 1)
        (pcase last-command
          ('hs-cycle
           (hs-hide-level 1)
           (setq this-command 'hs-cycle-children))
          ('hs-cycle-children
           ;; TODO: Fix this case. `hs-show-block' needs to be
           ;; called twice to open all folds of the parent
           ;; block.
           (save-excursion (hs-show-block))
           (hs-show-block)
           (setq this-command 'hs-cycle-subtree))
          ('hs-cycle-subtree
           (hs-hide-block))
          (_
           (if (not (hs-already-hidden-p))
               (hs-hide-block)
             (hs-hide-level 1)
             (setq this-command 'hs-cycle-children))))
      (hs-hide-level level)
      (setq this-command 'hs-hide-level))))

(defun hs-global-cycle ()
  (interactive)
  (pcase last-command
    ('hs-global-cycle
     (save-excursion (hs-show-all))
     (setq this-command 'hs-global-show))
    (_ (hs-hide-all))))
#+end_src

* Zig

zig-mode - https://github.com/ziglang/zig-mode
ZLS via eglot - https://github.com/zigtools/zls 

#+begin_src emacs-lisp
(use-package zig-mode)
(add-hook 'zig-mode-hook 'eglot-ensure)

(straight-use-package
 '(ob-zig :type git :host github :repo "jolby/ob-zig.el"))
(use-package ob-zig)
#+end_src

* Tcl

#+begin_src emacs-lisp
(defun tcl-eval-buffer (start end &optional and-go)
  "Send the current region to the inferior Tcl process. Prefix argument means switch to the Tcl buffer afterwards."
  (interactive "r\nP")
  (tcl-eval-region (point-min) (point-max) and-go))

(use-package tcl
  :bind ("C-c C-c" . tcl-eval-buffer))
#+end_src

* himalaya
https://github.com/dantecatalfamo/himalaya-emacs

#+begin_src emacs-lisp
(straight-use-package
    '(himalaya :type git :host github :repo "dantecatalfamo/himalaya-emacs"))
(use-package himalaya
  :load-path "~/dots/emacs/.emacs.d/straight/repos/himalaya-emacs")
#+end_src

* gptel

#+begin_src emacs-lisp
;; gptel - https://github.com/karthink/gptel/tree/6c47c0a48306e127557caf54c5a03e162e2d2ed3
(use-package gptel
  :bind (("C-x RET" . gptel-send))
  :init
  (setq gptel-model "gpt-4")
  (setq gptel-default-mode 'org-mode)
  (setq gptel-stream 't)
  (setq gptel-api-key (getenv "OPENAI_API_KEY")))
#+end_src

* Line Numbers

#+begin_src emacs-lisp
(defun display-line-numbers-fitting ()
  "Use compact width for line numbers"
  (interactive)
  (setq display-line-numbers-width nil))

(defun display-line-numbers-equalize ()
  "Equalize width of line numbers"
  (interactive)
  (setq display-line-numbers-width (length (number-to-string (line-number-at-pos (point-max))))))

(add-hook 'find-file-hook 'display-line-numbers-equalize)
#+end_src
