#!/usr/bin/env bash
# jtc - json token count utility
#

set -euo pipefail

print_help() {
  echo "jtc - json token count utility"
  echo ""
  echo "Usage:"
  echo "  cat request.json | jtc [-d DEPTH] [-m MODEL] [-p PATH]"
  echo ""
  echo "Options:"
  echo "  -d DEPTH    How deep to traverse the JSON object (default: 1)"
  echo "  -m MODEL    Tokenizer model to use (default: Xenova/gpt-4o)"
  echo "  -p PATH     Starting point in the JSON object (default: ".")"
  echo ""
  echo "Examples:"
  echo "  echo '{\"name\": \"John\"}' | jtc"
  echo "  cat file.json | jtc -d 2"
  echo "  jtc -d 2 -m \"Xenova/gpt-4o\" -p \".Root.tools\""
  echo "  jtc -d 2 -m \"Xenova/claude-tokenizer\" -p \".Root.messages[0]\""
  echo ""
  echo "See https://huggingface.co/models?other=tokenizers for available models"
}

if ! command -v tc >/dev/null 2>&1; then
  echo "Error: tc is required but not installed" >&2
  echo "Install with: cargo install token-counter" >&2
  print_help >&2
  exit 1
fi

# Arguments
DEPTH=1
TOKENIZER="Xenova/gpt-4o"
JSON_PATH="."

PATH_WIDTH=$((DEPTH * 8)) # col for $path

while getopts "d:m:p:h" opt; do
  case $opt in
    d) DEPTH="$OPTARG" ;;
    m) TOKENIZER="$OPTARG" ;;
    p) JSON_PATH="$OPTARG" ;;
    h) print_help; exit 0 ;;
    \?) print_help >&2; exit 1 ;;
  esac
done


JSON=$(cat)
if [ -z "$JSON" ]; then
  print_help >&2
  exit 1
fi

# Validate JSON
if ! echo "$JSON" | jq . >/dev/null 2>&1; then
  echo "Error: Invalid JSON input" >&2
  print_help >&2
  exit 1
fi

get_token_count() {
  local json="$1"
  echo "$json" | tc --model "$TOKENIZER" | awk '{print $1}'
}

traverse_json() {
  local path="$1"
  local depth="$2"
  local json="$3"

  # Normalize '.' to '' to avoid printing ".."
  if [ "$path" = "." ]; then
    path=""
  fi
  
  # Update path width if current path is longer
  if [ ${#path} -gt $PATH_WIDTH ]; then
    PATH_WIDTH=${#path}
  fi
  
  local count=$(get_token_count "$json")
  if [ -z "$path" ]; then
    printf "%7d\tTotal\n" "$count"
  else
    local hint=""
    if echo "$json" | jq -e 'type == "object"' > /dev/null; then
      hint=$(echo "$json" | jq -r '.name // empty')
    elif echo "$json" | jq -e 'type | . == "string" or . == "number" or . == "boolean"' > /dev/null; then
      hint=$(echo "$json" | jq -r '. | tostring')
    fi

    if [ -n "$hint" ]; then
      hint=$(echo "$hint" | tr '\n' ' ' | awk '{$1=$1};1')
      if [ ${#hint} -gt 50 ]; then
        hint="${hint:0:50}..."
      fi
      printf "%7d\t%-${PATH_WIDTH}s    \033[2m(%s)\033[0m\n" "$count" "$path" "$hint"
    else
      printf "%7d\t%-${PATH_WIDTH}s\n" "$count" "$path"
    fi
  fi

  if [ "$depth" -le 0 ]; then
    return
  fi

  if echo "$json" | jq -e 'type == "object"' > /dev/null; then
    local keys=$(echo "$json" | jq -r 'keys[]')
    for key in $keys; do
      local value
      if [[ "$key" == \$* ]]; then
        value=$(echo "$json" | jq -c ".[\"$key\"]")
      else
        value=$(echo "$json" | jq -c ".$key")
      fi
      if [ -z "$path" ]; then
        traverse_json ".$key" $((depth-1)) "$value"
      else
        traverse_json "$path.$key" $((depth-1)) "$value"
      fi
    done
  elif echo "$json" | jq -e 'type == "array"' > /dev/null; then
    local length=$(echo "$json" | jq 'length')
    if [ "$depth" -gt 0 ]; then
      local elements=$(echo "$json" | jq -c '.[]')
      local i=0
      while IFS= read -r element; do
        if [ -z "$path" ]; then
          traverse_json "[$i]" $((depth-1)) "$element"
        else
          traverse_json "$path[$i]" $((depth-1)) "$element"
        fi
        i=$((i+1))
      done <<< "$elements"
    fi
  fi
}

if [ -n "$JSON_PATH" ] && [ "$JSON_PATH" != "." ]; then
  JSON=$(echo "$JSON" | jq "$JSON_PATH")
  if [ $? -ne 0 ]; then
    echo "Error: Invalid path '$JSON_PATH'" >&2
    exit 1
  fi
fi

# Start traversal from root with empty path
traverse_json "$JSON_PATH" "$DEPTH" "$JSON"
